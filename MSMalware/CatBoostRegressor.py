

# Linda MacPhee-Cobb
# https://github.com/timestocome

# MS Malware Detection
# https://www.kaggle.com/c/microsoft-malware-prediction






#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 17 09:21:29 2019

# http://github.com/timestocome
# Linda MacPhee-Cobb


"""


import pandas as pd
import numpy as np


from catboost import Pool, CatBoostClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import roc_curve, auc    
from sklearn.model_selection import cross_val_score

import datetime
import pickle

pd.set_option('display.max_columns', 200)
pd.set_option('display.max_rows', 1000)



#############################################################################################
# read in cleaned, selected data
############################################################################################
print(datetime.datetime.now())

print('Reading data.............................')


# read in raw data
train = pd.read_csv('clean_train.csv', index_col=0, dtype=object)
test = pd.read_csv('clean_test.csv', index_col=0, dtype=object)

features = list(train.columns.values)
features.remove('HasDetections')

print(features)

# start with all the features and drop out low value features each training round
# until score stops improving


features = ['AvSigVersion',
            'AVProductStatesIdentifier',
            'AVProductsEnabled',
            'AVProductsInstalled',
            'AppVersion',
            #'Census_ActivationChannel',
            'Census_ChassisTypeName',
            'Census_FirmwareManufacturerIdentifier',
            #'Census_FirmwareVersionIdentifier',
            #'Census_FlightRing',
            #'Census_GenuineStateName',
            'Census_HasOpticalDiskDrive',
            'Census_InternalPrimaryDiagonalDisplaySizeInInches',
            #'Census_IsSecureBootEnabled',
            'Census_IsVirtualDevice',
            'Census_MDC2FormFactor',
            #'Census_OEMModelIdentifier',
            #'Census_OEMNameIdentifier',
            'Census_OSArchitecture',
            #'Census_OSBranch',
            'Census_OSBuildNumber',
            #'Census_OSBuildRevision',
            'Census_OSEdition',
            'Census_OSInstallLanguageIdentifier',
            'Census_OSInstallTypeName',
            'Census_OSSkuName',
            'Census_OSUILocaleIdentifier',
            'Census_OSVersion',
            #'Census_OSWUAutoUpdateOptionsName',
            #'Census_PowerPlatformRoleName',
            #'Census_PrimaryDiskTypeName',
            'Census_ProcessorCoreCount',
            'Census_ProcessorModelIdentifier',
            #'Census_ThresholdOptIn',
            #'CityIdentifier',
            'CountryIdentifier',
            'DefaultBrowsersIdentifier',
            'EngineVersion',
            #'Firewall',
            #'GeoNameIdentifier',
            'IeVerIdentifier',
            'IsProtected',
            #'IsSxsPassiveMode',
            'LocaleEnglishNameIdentifier',
            #'OrganizationIdentifier',
            'OsBuild',
            #'OsBuildLab',
            #'OsPlatformSubRelease',
            #'OsSuite',
            'Processor',
            'RtpStateBitfield',
            'SMode',
            #'SkuEdition',
            'SmartScreen',
            'Wdft_IsGamer',
            'Wdft_RegionIdentifier',
            'C_PrimaryDiskTotalCapacity',
            'C_SystemVolumeTotalCapacity',
            'C_TotalPhysicalRAM']



x_in = train[features]
y_in = pd.to_numeric(train['HasDetections']).astype(np.int32)



###########################################################################################
# utilities
###########################################################################################



def accuracy_data(actual, predicted):

   
    threshold = 0.5
    
    TP = 0
    FP = 0
    TN = 0
    FN = 0
    
    n = len(predicted)
    y_predicted = []
    
    for i in range(n):
        if actual[i] == 1:
            if predicted[i,1] >= threshold:
                TP += 1
                y_predicted.append(1)
            else:
                FP += 1
                y_predicted.append(0)
        elif actual[i] == 0:
            if predicted[i,1] < threshold:
                TN += 1
                y_predicted.append(0)
            else:
                FN += 1
                y_predicted.append(1)
    
    print('------------------------------------------------')

    print('TP: %d, TN: %d' % (TP, TN))
    print('FP: %d, FN: %d' % (FP, FN ))


   

    fpr, tpr, thresholds = roc_curve(actual, y_predicted)
    roc_auc = auc(fpr, tpr)
    print('***  Roc auc ', roc_auc)

    print('------------------------------------------------')





    
#########################################################################################
# build model
#########################################################################################

print('Splitting data')

x_train = train[features]
y_train = train['HasDetections']
                   
x_test = test[features]
y_test = test['HasDetections']




print('Training.....  Train size %d, test size %d' % (len(y_train), len(y_test)))


train_pool = Pool(x_train, y_train)
test_pool = Pool(x_test, y_test)



model = CatBoostClassifier(iterations=50,
                           loss_function='Logloss',
                           learning_rate=0.1
)

model.fit(train_pool, eval_set=test_pool)

preds_class = model.predict(test_pool, prediction_type='Class')
preds_prob = model.predict(test_pool, prediction_type='Probability')

print('Class', preds_class, preds_class.shape)
print('Prob', preds_prob, preds_prob.shape)



for i in range(len(features)):
    print(features[i], model.feature_importances_[i])

    


eval_metrics = model.eval_metrics(test_pool, ['AUC'])
print('Evaluation AUC on Test pool')
print(eval_metrics)



################################################################################
# save submission info
###################################################################################
print('running submission data through trained classifier')
submission_data = pd.read_csv('clean_submit.csv', index_col=0, dtype=object)
submission_data = submission_data[features]

submission_pool = Pool(submission_data)
submission_prob = model.predict(submission_pool, prediction_type='Probability')



print('saving submission data')
submission_data['HasDetections'] = submission_prob[:,1]
submission_data = submission_data['HasDetections']

submission_data.to_csv('CatBoost_Submission.csv')

print(len(submission_data))


print('-----------------  finished --------------------')


